package view;

import java.util.Date;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import model.Chave;
import model.Funcionario;
import model.Solicitacao;
import model.Usuario;
import controller.JanelaDeMensagens;
import java.awt.Color;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.Set;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
//import java.util.List;
//import java.util.ArrayList;
//import java.util.function.Consumer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.service.ServiceChave;
import model.service.ServiceSolicitacao;
import model.service.ServiceUsuario;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 */
public class ControleDeChaves extends javax.swing.JFrame {

    private JScrollBar jScrollBar;

    private DefaultTableModel modeloTabela;
    private Object[] colunas;

    private Solicitacao solicitacao;
    private Funcionario funcionario;
    private Chave chave;
    private Usuario usuario;

    private ServiceUsuario serviceUsuario;
    private ServiceChave serviceChave;
    private ServiceSolicitacao serviceSolicitacao;

    private Solicitacao listaSolicitacoes;

    private Date horaDevolucao;
    String conteudoTabela = "";

    private final Object[] options = {"Confirmar", "Cancelar"};

    /**
     * Creates new form Controle
     */
    public ControleDeChaves() {

        //maximizar janela
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        modeloTabela = new DefaultTableModel();
        colunas = new Object[9];
        funcionario = new Funcionario();
        usuario = new Usuario();
        serviceChave = new ServiceChave();
        serviceSolicitacao = new ServiceSolicitacao();
        serviceUsuario = new ServiceUsuario();
        solicitacao = new Solicitacao();
        initComponents();
        
        this.getRootPane().setDefaultButton(BotaoPesquisar); //setando o botão pesquisar como padrão 'enter'

        labelBoasVindas.setText("Bem vindo(a): " + funcionario.getNome_Funcionario());

        atualizarComboBoxChavesSolicitacao();
        atualizarComboBoxChavesDevolucao();
        atualizarComboBoxUsuario();
        JanelaDeMensagens.aumentarTamanhoTexto();

        //desativar a combobox de devolução caso não houver chaves a serem devolvidas
        if (cbxDevolucaoChave.getItemAt(0) == null) {
            cbxDevolucaoChave.setEnabled(false);
            BotaoRegistrarDevolucao.setEnabled(false);
        }

        //puxar todas as solicitações do banco ao iniciar o sistema. 
        popularTabela();

        //se não houver nada na coluna...
        if (modeloTabela.getRowCount() == 0) {
            cbxDevolucaoChave.setEnabled(false);
            BotaoRegistrarDevolucao.setEnabled(false);
        }
        
        
        
            ordenarTabelaPorDevolucao();

        //teste trocando a cor da seleção
//        TabelaSolicitacoes.setSelectionBackground(Color.GREEN);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BordaDeTitulo = new javax.swing.JPanel();
        labelDaBordaDeTitulo = new javax.swing.JLabel();
        PainelSolicitacoes = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaSolicitacoes = new javax.swing.JTable();
        BotaoRegistrarDevolucao = new javax.swing.JButton();
        cbxDevolucaoChave = new javax.swing.JComboBox<>();
        BotaoPesquisar = new javax.swing.JButton();
        campoDePesquisa = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        PainelDeRegistro = new javax.swing.JPanel();
        labelRegistrarSolicitacao = new javax.swing.JLabel();
        separador1 = new javax.swing.JSeparator();
        labelUsuario = new javax.swing.JLabel();
        labelUsuario2 = new javax.swing.JLabel();
        labelChave = new javax.swing.JLabel();
        labelChave2 = new javax.swing.JLabel();
        BotaoRegistrarSolicitacao = new javax.swing.JButton();
        cbxUsuario = new javax.swing.JComboBox<>();
        labelBoasVindas = new javax.swing.JLabel();
        BotaoExcluirChave = new javax.swing.JButton();
        cbxSolicitacaoChave = new javax.swing.JComboBox<>();
        BotaoExcluirUsuario = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        labelUsuario5 = new javax.swing.JLabel();
        campoChaveNome = new javax.swing.JTextField();
        labelUsuario6 = new javax.swing.JLabel();
        campoChaveNr = new javax.swing.JTextField();
        BotaoNovaChave = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        campoUsuarioNome = new javax.swing.JTextField();
        labelUsuario3 = new javax.swing.JLabel();
        labelUsuario4 = new javax.swing.JLabel();
        campoUsuarioIdentificacao = new javax.swing.JTextField();
        BotaoNovoUsuario = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setSize(new java.awt.Dimension(1440, 900));

        BordaDeTitulo.setBackground(new java.awt.Color(9, 164, 210));

        labelDaBordaDeTitulo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelDaBordaDeTitulo.setForeground(new java.awt.Color(255, 255, 255));
        labelDaBordaDeTitulo.setText("Controle De Chaves");

        javax.swing.GroupLayout BordaDeTituloLayout = new javax.swing.GroupLayout(BordaDeTitulo);
        BordaDeTitulo.setLayout(BordaDeTituloLayout);
        BordaDeTituloLayout.setHorizontalGroup(
            BordaDeTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BordaDeTituloLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(labelDaBordaDeTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        BordaDeTituloLayout.setVerticalGroup(
            BordaDeTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BordaDeTituloLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(labelDaBordaDeTitulo)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        PainelSolicitacoes.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Vrinda", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 153));
        jLabel7.setText("Últimas Solicitações");

        TabelaSolicitacoes.setAutoCreateRowSorter(true);
        TabelaSolicitacoes.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        TabelaSolicitacoes.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TabelaSolicitacoes.setForeground(new java.awt.Color(102, 0, 255));
        TabelaSolicitacoes.setModel(this.modeloTabela);
        modeloTabela.addColumn("Data");
        modeloTabela.addColumn("Laboratório/Sala");
        modeloTabela.addColumn("Número da Chave");
        modeloTabela.addColumn("Usuário Responsável");
        modeloTabela.addColumn("Horário Retirada");
        modeloTabela.addColumn("Entregue por");
        modeloTabela.addColumn("Horário Devolução ");
        modeloTabela.addColumn("Recebido por");
        modeloTabela.addColumn("Status");

        TabelaSolicitacoes.setDefaultEditor(Object.class, null);
        TabelaSolicitacoes.setCellSelectionEnabled(true);
        TabelaSolicitacoes.setEditingColumn(0);
        TabelaSolicitacoes.setEditingRow(0);
        TabelaSolicitacoes.setGridColor(new java.awt.Color(204, 204, 204));
        TabelaSolicitacoes.setRowHeight(40);
        TabelaSolicitacoes.setRowSorter(null);
        TabelaSolicitacoes.setSelectionBackground(new java.awt.Color(0, 153, 102));
        TabelaSolicitacoes.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(TabelaSolicitacoes);
        TabelaSolicitacoes.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        BotaoRegistrarDevolucao.setBackground(new java.awt.Color(153, 255, 153));
        BotaoRegistrarDevolucao.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BotaoRegistrarDevolucao.setText("Registrar Devolução ");
        BotaoRegistrarDevolucao.setToolTipText("Registrar devolução da chave");
        BotaoRegistrarDevolucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoRegistrarDevolucaoActionPerformed(evt);
            }
        });

        cbxDevolucaoChave.setBackground(new java.awt.Color(153, 153, 255));
        cbxDevolucaoChave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbxDevolucaoChave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDevolucaoChaveActionPerformed(evt);
            }
        });

        BotaoPesquisar.setBackground(new java.awt.Color(166, 227, 227));
        BotaoPesquisar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BotaoPesquisar.setText("Pesquisar");
        BotaoPesquisar.setToolTipText("Pesquisar por chave na tabela");
        BotaoPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoPesquisarActionPerformed(evt);
            }
        });

        campoDePesquisa.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        campoDePesquisa.setToolTipText("Chave ou Usuário");
        campoDePesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoDePesquisaActionPerformed(evt);
            }
        });

        jLabel1.setText("Copyright by Douglas Feliphe © 2017-2018 ");

        javax.swing.GroupLayout PainelSolicitacoesLayout = new javax.swing.GroupLayout(PainelSolicitacoes);
        PainelSolicitacoes.setLayout(PainelSolicitacoesLayout);
        PainelSolicitacoesLayout.setHorizontalGroup(
            PainelSolicitacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(PainelSolicitacoesLayout.createSequentialGroup()
                .addGroup(PainelSolicitacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelSolicitacoesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(PainelSolicitacoesLayout.createSequentialGroup()
                        .addGap(447, 447, 447)
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PainelSolicitacoesLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(campoDePesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotaoPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxDevolucaoChave, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotaoRegistrarDevolucao)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelSolicitacoesLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(465, 465, 465))
        );
        PainelSolicitacoesLayout.setVerticalGroup(
            PainelSolicitacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelSolicitacoesLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PainelSolicitacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxDevolucaoChave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotaoRegistrarDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotaoPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(campoDePesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        PainelDeRegistro.setBackground(new java.awt.Color(255, 255, 255));

        labelRegistrarSolicitacao.setFont(new java.awt.Font("Vrinda", 1, 24)); // NOI18N
        labelRegistrarSolicitacao.setForeground(new java.awt.Color(0, 102, 153));
        labelRegistrarSolicitacao.setText("Registrar Solicitação");

        labelUsuario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelUsuario.setText("Usuário");

        labelUsuario2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelUsuario2.setText("Informe o nome do usuário que está solicitando a chave.");

        labelChave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelChave.setText("Chave");

        labelChave2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelChave2.setText("Informe qual chave está sendo solicitada");

        BotaoRegistrarSolicitacao.setBackground(new java.awt.Color(255, 153, 102));
        BotaoRegistrarSolicitacao.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BotaoRegistrarSolicitacao.setText("Registrar Solicitação ");
        BotaoRegistrarSolicitacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoRegistrarSolicitacaoActionPerformed(evt);
            }
        });

        cbxUsuario.setBackground(new java.awt.Color(153, 153, 255));
        cbxUsuario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbxUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxUsuarioActionPerformed(evt);
            }
        });

        labelBoasVindas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        BotaoExcluirChave.setBackground(new java.awt.Color(255, 102, 102));
        BotaoExcluirChave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BotaoExcluirChave.setText("x");
        BotaoExcluirChave.setToolTipText("Deletar Chave");
        BotaoExcluirChave.setFocusable(false);
        BotaoExcluirChave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoExcluirChaveActionPerformed(evt);
            }
        });

        cbxSolicitacaoChave.setBackground(new java.awt.Color(153, 153, 255));
        cbxSolicitacaoChave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbxSolicitacaoChave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSolicitacaoChaveActionPerformed(evt);
            }
        });

        BotaoExcluirUsuario.setBackground(new java.awt.Color(255, 102, 102));
        BotaoExcluirUsuario.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BotaoExcluirUsuario.setText("x");
        BotaoExcluirUsuario.setToolTipText("Deletar Usuário");
        BotaoExcluirUsuario.setFocusable(false);
        BotaoExcluirUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoExcluirUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PainelDeRegistroLayout = new javax.swing.GroupLayout(PainelDeRegistro);
        PainelDeRegistro.setLayout(PainelDeRegistroLayout);
        PainelDeRegistroLayout.setHorizontalGroup(
            PainelDeRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelDeRegistroLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(BotaoExcluirUsuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelDeRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelUsuario2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 261, Short.MAX_VALUE)
                .addGroup(PainelDeRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelChave2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelChave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PainelDeRegistroLayout.createSequentialGroup()
                        .addComponent(BotaoExcluirChave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxSolicitacaoChave, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BotaoRegistrarSolicitacao, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18))
            .addGroup(PainelDeRegistroLayout.createSequentialGroup()
                .addGroup(PainelDeRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelDeRegistroLayout.createSequentialGroup()
                        .addGap(448, 448, 448)
                        .addComponent(labelRegistrarSolicitacao))
                    .addGroup(PainelDeRegistroLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelBoasVindas)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(separador1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        PainelDeRegistroLayout.setVerticalGroup(
            PainelDeRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelDeRegistroLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(labelBoasVindas, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelRegistrarSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(separador1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelDeRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUsuario)
                    .addComponent(labelChave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelDeRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotaoExcluirChave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxSolicitacaoChave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotaoExcluirUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PainelDeRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUsuario2)
                    .addComponent(labelChave2))
                .addGap(34, 34, 34)
                .addComponent(BotaoRegistrarSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Solicitações", PainelDeRegistro);

        jPanel2.setPreferredSize(new java.awt.Dimension(325, 269));

        labelUsuario5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelUsuario5.setText("Informe o laboratório/sala da nova chave :");

        campoChaveNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoChaveNomeActionPerformed(evt);
            }
        });

        labelUsuario6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelUsuario6.setText("Informe o número da nova chave:");

        BotaoNovaChave.setBackground(new java.awt.Color(56, 158, 255));
        BotaoNovaChave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BotaoNovaChave.setText("Adicionar Nova Chave");
        BotaoNovaChave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoNovaChaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoChaveNr, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotaoNovaChave)
                    .addComponent(labelUsuario6)
                    .addComponent(labelUsuario5)
                    .addComponent(campoChaveNome, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(labelUsuario5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoChaveNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelUsuario6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoChaveNr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(BotaoNovaChave)
                .addGap(31, 31, 31))
        );

        jSplitPane1.setRightComponent(jPanel2);

        labelUsuario3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelUsuario3.setText("Informe o nome do usuário:");

        labelUsuario4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelUsuario4.setText("Informe o número da matrícula ou CPF:");

        BotaoNovoUsuario.setBackground(new java.awt.Color(56, 158, 255));
        BotaoNovoUsuario.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BotaoNovoUsuario.setText("Adicionar Novo Usuario");
        BotaoNovoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoNovoUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotaoNovoUsuario)
                    .addComponent(campoUsuarioIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelUsuario4)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(campoUsuarioNome, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labelUsuario3, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(80, 80, 80))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(labelUsuario3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoUsuarioNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelUsuario4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoUsuarioIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(BotaoNovoUsuario)
                .addGap(47, 47, 47))
        );

        jSplitPane1.setLeftComponent(jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(159, Short.MAX_VALUE)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Adicionar", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1)
                    .addComponent(BordaDeTitulo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PainelSolicitacoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(125, 125, 125))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BordaDeTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PainelSolicitacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BotaoRegistrarSolicitacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoRegistrarSolicitacaoActionPerformed

        //pesquisar na tabela se o usuário já pegou aquela chave
        boolean chaveEmUso = false;
        boolean usuarioPegouChave = false;

        String usuarioChave = cbxUsuario.getSelectedItem().toString();

        //escolhendo a chave na comboBox
        String chaveEscolhida = cbxSolicitacaoChave.getSelectedItem().toString();

        String labSala = chaveEscolhida.substring(0, chaveEscolhida.indexOf("/") - 1);
        String nrChave = chaveEscolhida.substring(chaveEscolhida.indexOf("º") + 1);

        //selecionar coluna ao registrar solicitacao... 
//        for (int linha = 0; linha < modeloTabela.getRowCount(); linha++) {
//            for (int coluna = 0; coluna < modeloTabela.getColumnCount(); coluna++) {
//                if (modeloTabela.getValueAt(linha, coluna).equals(labSala)) {
//                    TabelaSolicitacoes.changeSelection(linha, coluna, true, true);
//                    break;
//                }
//            }
//        }

        try {
            chaveEmUso = serviceSolicitacao.pesquisarSolicitacao(labSala);

        } catch (SQLException ex) {
            Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            usuarioPegouChave = serviceSolicitacao.pesquisarUsuarioChave(usuarioChave);
        } catch (SQLException ex) {
            Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!chaveEmUso) {

            if (!usuarioPegouChave) {

                //limpando o campo de pesquisa
                limparResultadoPesquisa();
                campoDePesquisa.setText("");

                //chamando instancia da classe 'solicitacao'.
                //guardar a data atual
                solicitacao.setData(new Date());

                //guardar a chave correspondente
                solicitacao.setLaboratorioSala(labSala);

                //guardar o número da chave correspondente
                solicitacao.setNrChave(nrChave);

                //guardar o nome do usuário que solicitou a chave
                solicitacao.setUsuario(cbxUsuario.getSelectedItem().toString());

                //pegar a hora da solicitacao
                horaDevolucao = new Date();
                solicitacao.setHorarioRetirada(horaDevolucao);

                //pegando os dados do funcionario que entregou a chave
                solicitacao.setEntreguePor(funcionario.getNome_Funcionario());// entregue por...

                //campos de devolução nulos porque ainda não foram devolvidas...
                //horário de devolução
                Date horarioVazio = null;

                try {
                    horarioVazio = new SimpleDateFormat("dd/mm/yyyy").parse("00/00/00");
                } catch (ParseException ex) {
                    Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
                }

                solicitacao.setHorarioDevolucao(horarioVazio);

//              qual funcionário recebeu a chave quando foi  devolvida.
//                solicitacao.setRecebidoPor(funcionario.getNome_Funcionario());
                //status da solicitação
                solicitacao.setStatus(false);

                //populando a tabela
                colunas[0] = solicitacao.getData();
                colunas[1] = solicitacao.getLaboratorioSala();
                colunas[2] = solicitacao.getNrChave();
                colunas[3] = solicitacao.getUsuario();
                colunas[4] = solicitacao.getHorarioRetirada();
                colunas[5] = solicitacao.getEntreguePor();
                colunas[6] = "";
                colunas[7] = "";
                colunas[8] = solicitacao.getStatus();

// tabela.getColumnModel().getColumn(numeroUltimaColuna);
//column.setCellEditor(new DefaultCellEditor(new JButton("Botão")));

                int resposta = JOptionPane.showOptionDialog(null, "CONFIRMAR SOLIÇITAÇÃO? \n\nNome: " + solicitacao.getUsuario() + "\n Chave: " + solicitacao.getLaboratorioSala() + "\n\n", "Informação", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

                if (resposta == 0) {
                    try {
                        serviceSolicitacao.registrarSolicitacao(solicitacao);
                        JOptionPane.showMessageDialog(null, "Solicitação registrada com sucesso!");
//                        popularTabela();
                    } catch (SQLException ex) {
                        Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
                    }

//                  modelo.addRow(objeto[0]{chaveTabela, usuarioTabela, horarioTabela, funcionarioTabela});
                    modeloTabela.addRow(colunas);

                }

                //ativando os componentes de devolução
                if (!cbxDevolucaoChave.isEnabled()) {
                    cbxDevolucaoChave.setEnabled(true);
                    BotaoRegistrarDevolucao.setEnabled(true);
                }

                atualizarComboBoxChavesDevolucao();
                ordenarTabelaPorDevolucao();

            } else {
                JOptionPane.showMessageDialog(rootPane, "O usuário " + usuarioChave + " já pegou uma chave!", "Alerta", JOptionPane.WARNING_MESSAGE, null);

            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "A Chave " + chaveEscolhida + " está em uso!", "Alerta", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_BotaoRegistrarSolicitacaoActionPerformed

    private void cbxUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxUsuarioActionPerformed

    private void BotaoRegistrarDevolucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoRegistrarDevolucaoActionPerformed

        String chaveDevolvida = cbxDevolucaoChave.getSelectedItem().toString();

        int resposta = JOptionPane.showOptionDialog(null, "CONFIRMAR DEVOLUÇÃO? \n\nLaboratório/Sala: " + chaveDevolvida + "\n\n", "Informação", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

        if (resposta == 0) {

            horaDevolucao = new Date();
            solicitacao.setHorarioDevolucao(horaDevolucao);
            solicitacao.setRecebidoPor(funcionario.getNome_Funcionario());
            solicitacao.setStatus(true);

            String labSala = chaveDevolvida.substring(0, chaveDevolvida.indexOf("/") - 1);
            String nrChave = chaveDevolvida.substring(chaveDevolvida.indexOf("º") + 1);

            try {
                //registar solicitação no banco de dados
                serviceSolicitacao.registraDevolucao(solicitacao, nrChave);

                //mudar conteúdo das 3 últimas colunas de acordo com os dados de devolução
                for (int linha = 0; linha < modeloTabela.getRowCount(); linha++) {
                    for (int coluna = 0; coluna < modeloTabela.getColumnCount(); coluna++) {
                        if (modeloTabela.getValueAt(linha, coluna).equals(labSala) && modeloTabela.getValueAt(linha, 8).equals(false)) {

                            modeloTabela.setValueAt(solicitacao.getHorarioDevolucao(), linha, 6);
                            modeloTabela.setValueAt(solicitacao.getRecebidoPor(), linha, 7);
                            modeloTabela.setValueAt(solicitacao.getStatus(), linha, 8);

                            break;
                        }
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Erro ao devolver a chave!");
            }

            atualizarComboBoxChavesDevolucao();
            ordenarTabelaPorDevolucao();
//            TabelaSolicitacoes.revalidate();
//            popularTabela();

            //caso não houver chave a ser devolida, desligar o botão e a combobox de devolução 
            if (cbxDevolucaoChave.getItemCount() == 0) {
                desligarBotaoEComboBox();
            }

//            JOptionPane.showMessageDialog(null, "Devolução registrada com sucesso!\nA chave agora está disponível");
            JOptionPane.showMessageDialog(rootPane, "Devolução registrada com sucesso!\nA chave agora está disponível", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_BotaoRegistrarDevolucaoActionPerformed

    private void BotaoPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoPesquisarActionPerformed

        pesquisarNaTabela(campoDePesquisa.getText());

    }//GEN-LAST:event_BotaoPesquisarActionPerformed

    private void cbxDevolucaoChaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDevolucaoChaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxDevolucaoChaveActionPerformed

    private void BotaoExcluirChaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoExcluirChaveActionPerformed

        String nomeChave = cbxSolicitacaoChave.getSelectedItem().toString();
        int i = JOptionPane.showConfirmDialog(null, "Excluir chave " + nomeChave + "?");

        if (i == 0) {

            try {
                serviceChave.deletarChave(nomeChave);
                JOptionPane.showMessageDialog(null, "Chave " + nomeChave + " excluida com sucesso!");
            } catch (SQLException ex) {
                Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.atualizarComboBoxChavesSolicitacao();

        }


    }//GEN-LAST:event_BotaoExcluirChaveActionPerformed

    private void campoDePesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoDePesquisaActionPerformed

    }//GEN-LAST:event_campoDePesquisaActionPerformed

    private void cbxSolicitacaoChaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSolicitacaoChaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxSolicitacaoChaveActionPerformed

    private void BotaoExcluirUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoExcluirUsuarioActionPerformed

        String nomeUsuario = cbxUsuario.getSelectedItem().toString();
        int i = JOptionPane.showConfirmDialog(null, "Excluir usuário " + nomeUsuario + "?");

        if (i == 0) {

            try {
                serviceUsuario.deletarUsuario(nomeUsuario);
                JOptionPane.showMessageDialog(null, "Usuário " + nomeUsuario + " deletado com sucesso!");
            } catch (SQLException ex) {
                Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
            }

            atualizarComboBoxUsuario();
        }
    }//GEN-LAST:event_BotaoExcluirUsuarioActionPerformed

    private void BotaoNovaChaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoNovaChaveActionPerformed
        chave = new Chave();
        chave.setLaboratorio_Sala(campoChaveNome.getText());
        chave.setNrChave(campoChaveNr.getText());

        try {
            if (!serviceChave.pesquisarChave(chave)) {

                try {

                    serviceChave.adicionarNovaChave(chave);
                    JOptionPane.showMessageDialog(null, "Chave " + chave.getLaboratorio_Sala() + " / nº" + chave.getNrChave() + " adicionada com sucesso!");

                } catch (SQLException ex) {
                    Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Chave já existe");
            }
        } catch (SQLException ex) {
            Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
        }

        //limpar os campos
        campoChaveNome.setText("");
        campoChaveNr.setText("");

        //atualizar a combobox Chaves
        atualizarComboBoxChavesSolicitacao();

    }//GEN-LAST:event_BotaoNovaChaveActionPerformed

    private void BotaoNovoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoNovoUsuarioActionPerformed

        usuario.setNomeUsuario(campoUsuarioNome.getText().toUpperCase());
        usuario.setNumeroIdentificacao(campoUsuarioIdentificacao.getText().toUpperCase());

        try {

            if (!serviceUsuario.pesquisarUsuario(usuario.getNumeroIdentificacao())) {

                try {
                    serviceUsuario.adicionarUsuario(usuario);
                    JOptionPane.showMessageDialog(null, "Usuário " + usuario.getNomeUsuario() + " cadastrado com sucesso!");
                } catch (SQLException ex) {
                    Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Usuário " + usuario.getNomeUsuario() + " já existe");
            }
        } catch (SQLException ex) {
            Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
        }

        //atualizar a comboBox Usuário.
        atualizarComboBoxUsuario();

        //limpar os campos
        campoUsuarioNome.setText("");
        campoUsuarioIdentificacao.setText("");

    }//GEN-LAST:event_BotaoNovoUsuarioActionPerformed

    private void campoChaveNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoChaveNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoChaveNomeActionPerformed

//    private void popularTabela() {
    //
    //    }
    //atualiza o nome das chaves das comboBox de devolução e de solicitaçao de acordo com o registro do banco de dados
    private void atualizarComboBoxChavesSolicitacao() {

        //remove todos os itens das comboBox solicitação e devolução.
        cbxSolicitacaoChave.removeAllItems();

        try {
            //adiciona á comboBox de solicitação e devolução, uma lista contendo todas as chaves registradas.
            serviceChave.listarChaves().forEach((chave) -> {
                cbxSolicitacaoChave.addItem(chave.getLaboratorio_Sala() + " / nº" + chave.getNrChave());
            });

        } catch (SQLException ex) {
            Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void atualizarComboBoxChavesDevolucao() {

        //remove todos os itens da comboBox de devolução.
        cbxDevolucaoChave.removeAllItems();

        try {

            //adiciona á comboBox de devolução, todas as solicitacoes com status não devolvida.
            serviceSolicitacao.listarSolicitacoes(true).forEach((Solicitacao solicitacaoChave) -> {
                cbxDevolucaoChave.addItem(solicitacaoChave.getLaboratorioSala() + " / nº" + solicitacaoChave.getNrChave());
            });

        } catch (SQLException | ParseException ex) {
            Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void atualizarComboBoxUsuario() {
        //remove todos os itens das comboBox de usuário.
        cbxUsuario.removeAllItems();
        try {
            //adiciona à comboBox, a lista dos usuários existentes no banco.
            serviceUsuario.listarUsuarios().forEach((lista) -> {
                cbxUsuario.addItem(lista.getNomeUsuario());
            });
        } catch (SQLException ex) {
            Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void popularTabela() {
        try {
            serviceSolicitacao.listarSolicitacoes(false).forEach((solicitacao) -> {
                colunas[0] = solicitacao.getData();
                colunas[1] = solicitacao.getLaboratorioSala();
                colunas[2] = solicitacao.getNrChave();
                colunas[3] = solicitacao.getUsuario();
                colunas[4] = solicitacao.getHorarioRetirada();
                colunas[5] = solicitacao.getEntreguePor();

                if (solicitacao.getHorarioDevolucao().equals("00:00:00")) {
                    colunas[6] = "";
                } else {
                    colunas[6] = solicitacao.getHorarioDevolucao();
                }

                colunas[7] = solicitacao.getRecebidoPor();
                colunas[8] = solicitacao.getStatus();
                modeloTabela.addRow(colunas);
            });
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(ControleDeChaves.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Erro ao popular a tabela");
        }
    }

    private void pesquisarNaTabela(String valorCampo) {

        if (solicitacao != null) {  //se houver alguma solicitação registrada...

            final TableRowSorter<TableModel> sorter = new TableRowSorter<>(modeloTabela);
            TabelaSolicitacoes.setRowSorter(sorter);
            sorter.setRowFilter(RowFilter.regexFilter(valorCampo));

        } else { //se não...
            JOptionPane.showMessageDialog(null, "A tabela está vazia!");
        }

    }

    private void ordenarTabelaPorDevolucao() {
        final TableRowSorter<TableModel> sorter = new TableRowSorter<>(modeloTabela);
        TabelaSolicitacoes.setRowSorter(sorter);
        System.out.println(modeloTabela.getColumnCount()-1);
        sorter.toggleSortOrder(modeloTabela.getColumnCount()-1); // Esta linha seleciona a coluna padrão ordenada
    }

    private void limparResultadoPesquisa() {
        final TableRowSorter<TableModel> sorter = new TableRowSorter<>(modeloTabela);
        TabelaSolicitacoes.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(""));
    }

    private void desligarBotaoEComboBox() {
        cbxDevolucaoChave.setEnabled(false);
        BotaoRegistrarDevolucao.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControleDeChaves.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControleDeChaves.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControleDeChaves.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControleDeChaves.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            UIManager.put("Button.defaultButtonFollowsFocus", Boolean.TRUE);//ao pressionar a tecla tab, o botão é focado e assim podemos teclar enter para iniciá-lo
            new ControleDeChaves().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BordaDeTitulo;
    private javax.swing.JButton BotaoExcluirChave;
    private javax.swing.JButton BotaoExcluirUsuario;
    private javax.swing.JButton BotaoNovaChave;
    private javax.swing.JButton BotaoNovoUsuario;
    private javax.swing.JButton BotaoPesquisar;
    private javax.swing.JButton BotaoRegistrarDevolucao;
    private javax.swing.JButton BotaoRegistrarSolicitacao;
    private javax.swing.JPanel PainelDeRegistro;
    private javax.swing.JPanel PainelSolicitacoes;
    private javax.swing.JTable TabelaSolicitacoes;
    private javax.swing.JTextField campoChaveNome;
    private javax.swing.JTextField campoChaveNr;
    private javax.swing.JTextField campoDePesquisa;
    private javax.swing.JTextField campoUsuarioIdentificacao;
    private javax.swing.JTextField campoUsuarioNome;
    private javax.swing.JComboBox<String> cbxDevolucaoChave;
    private javax.swing.JComboBox<String> cbxSolicitacaoChave;
    private javax.swing.JComboBox<String> cbxUsuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelBoasVindas;
    private javax.swing.JLabel labelChave;
    private javax.swing.JLabel labelChave2;
    private javax.swing.JLabel labelDaBordaDeTitulo;
    private javax.swing.JLabel labelRegistrarSolicitacao;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JLabel labelUsuario2;
    private javax.swing.JLabel labelUsuario3;
    private javax.swing.JLabel labelUsuario4;
    private javax.swing.JLabel labelUsuario5;
    private javax.swing.JLabel labelUsuario6;
    private javax.swing.JSeparator separador1;
    // End of variables declaration//GEN-END:variables
}
